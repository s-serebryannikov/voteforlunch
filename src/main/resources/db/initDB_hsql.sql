DROP TABLE votes IF EXISTS;
DROP TABLE dishes IF EXISTS;
DROP TABLE restaurants IF EXISTS;
DROP TABLE user_roles IF EXISTS;
DROP TABLE users IF EXISTS;
DROP SEQUENCE global_seq IF EXISTS;

CREATE SEQUENCE global_seq START WITH 100000;

CREATE TABLE users
(
    id       INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    name     VARCHAR(255)         NOT NULL,
    email    VARCHAR(255)         NOT NULL,
    password VARCHAR(255)         NOT NULL,
    enabled  BOOLEAN DEFAULT TRUE NOT NULL
);
CREATE UNIQUE INDEX users_unique_email_idx ON users (email);

CREATE TABLE user_roles
(
    user_id INTEGER NOT NULL,
    role    VARCHAR(255) NOT NULL,
    CONSTRAINT user_roles_idx UNIQUE (user_id, role),
    FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE TABLE restaurants
(
    id      INTEGER GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    name    VARCHAR(255) NOT NULL,
    address VARCHAR(255) NOT NULL,
    CONSTRAINT restaurants_name_address_unique UNIQUE (name, address)
);

CREATE TABLE dishes
(
    id               BIGINT GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    name             VARCHAR(255) NOT NULL,
    price            INTEGER      NOT NULL,
    date             DATE         NOT NULL,
    fk_restaurant_id BIGINT       NOT NULL,
    FOREIGN KEY (fk_restaurant_id) REFERENCES restaurants (id) ON DELETE CASCADE
);

CREATE UNIQUE INDEX dishes_restaurant_date_name_idx ON DISHES (fk_restaurant_id, date, name);

CREATE TABLE votes
(
    id               BIGINT GENERATED BY DEFAULT AS SEQUENCE GLOBAL_SEQ PRIMARY KEY,
    date             DATE   NOT NULL,
    time             TIME   NOT NULL,
    fk_user_id       BIGINT NOT NULL,
    fk_restaurant_id BIGINT NOT NULL,
    CONSTRAINT votes_user_date_unique UNIQUE (fk_user_id, date),
    FOREIGN KEY (fk_user_id) REFERENCES USERS (id) ON DELETE CASCADE,
    FOREIGN KEY (fk_restaurant_id) REFERENCES RESTAURANTS (id) ON DELETE CASCADE
);

CREATE INDEX votes_user_idx ON votes (fk_user_id);